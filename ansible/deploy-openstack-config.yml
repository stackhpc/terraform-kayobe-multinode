---
- name: Deploy OpenStack Configuration
  hosts: ansible_control
  gather_facts: false
  vars_files:
    - vars/defaults.yml
  tasks:
    - name: Verify ssh key path has been set
      ansible.builtin.assert:
        that:
          - ssh_key_path != None
        fail_msg: "Please provide a path to the SSH key used within the multinode environment."

    - name: Verify VXLAN VNI has been set
      ansible.builtin.assert:
        that:
          - vxlan_vni != None
        fail_msg: "Please provide a VXLAN VNI. A unique value from 1 to 100,000."

    - name: Gather facts about the host
      ansible.builtin.setup:
        gather_subset:
          - user_dir

    - name: Ensure git is present
      ansible.builtin.package:
        name: git
        state: present
      become: true

    - name: Ensure `source` directory exists
      ansible.builtin.file:
        path: "{{ src_directory }}"
        state: directory
        mode: "0755"

    - name: Ensure Kayobe Config repository is present
      ansible.builtin.git:
        repo: "{{ kayobe_config_repo }}"
        version: "{{ kayobe_config_version }}"
        dest: "{{ src_directory }}/{{ kayobe_config_name }}"
        update: false

    - name: Ensure hooks directory are present
      ansible.builtin.file:
        dest: "{{ src_directory }}/{{ kayobe_config_name }}/etc/kayobe/hooks/{{ item }}"
        state: directory
        mode: "0700"
      loop:
        - overcloud-host-configure/pre.d/
        - seed-host-configure/pre.d/

    - name: Ensure Kayobe hooks are present
      ansible.builtin.file:
        src: '{{ src_directory }}/{{ kayobe_config_name }}/etc/kayobe/ansible/{{ item.src }}'
        dest: '{{ src_directory }}/{{ kayobe_config_name }}/etc/kayobe/hooks/{{ item.dest }}'
        state: link
      loop:
        - { src: growroot.yml, dest: overcloud-host-configure/pre.d/5-growroot.yml }
        - { src: fix-hostname.yml, dest: overcloud-host-configure/pre.d/10-fix-hostname.yml }
        - { src: fix-networking.yml, dest: overcloud-host-configure/pre.d/15-fix-networking.yml }
        - { src: configure-vxlan.yml, dest: overcloud-host-configure/pre.d/20-configure-vxlan.yml }
        - { src: growroot.yml, dest: seed-host-configure/pre.d/5-growroot.yml }
        - { src: fix-networking.yml, dest: seed-host-configure/pre.d/15-fix-networking.yml }
        - { src: configure-vxlan.yml, dest: seed-host-configure/pre.d/20-configure-vxlan.yml }


    - name: Ensure Admin Overcloud Network file is present
      ansible.builtin.copy:
        src: "files/admin-oc-networks.yml"
        dest: "{{ src_directory }}/{{ kayobe_config_name }}/etc/kayobe/environments/{{ kayobe_config_environment }}/admin-oc-networks.yml"
        mode: "0644"

    - name: Ensure Hosts file is present
      ansible.builtin.copy:
        src: "files/hosts"
        dest: "{{ src_directory }}/{{ kayobe_config_name }}/etc/kayobe/environments/{{ kayobe_config_environment }}/inventory/hosts"
        mode: "0644"

    - name: Ensure root_domain is defined
      ansible.builtin.lineinfile:
        path: "{{ src_directory }}/{{ kayobe_config_name }}/etc/kayobe/environments/{{ kayobe_config_environment }}/inventory/group_vars/all/main.yml"
        line: "root_domain: {{ root_domain }}"

    - name: Ensure hosts are added to /etc/hosts
      ansible.builtin.lineinfile:
        path: "/etc/hosts"
        line: "{{ item.value }}\t{{ item.key }}"
      loop: "{{ (lookup('file', 'files/admin-oc-networks.yml') | from_yaml).admin_oc_ips | dict2items }}"
      become: true

    - name: Ensure VXLAN VNI has been set
      ansible.builtin.lineinfile:
        path: "{{ src_directory }}/{{ kayobe_config_name }}/etc/kayobe/environments/{{ kayobe_config_environment }}/inventory/group_vars/all/vxlan.yml"
        search_string: "vxlan_vni:"
        line: "vxlan_vni: {{ vxlan_vni }}"
        mode: "0644"

    - name: Ensure Kayobe repository is present
      ansible.builtin.git:
        repo: "{{ kayobe_repo }}"
        version: "{{ kayobe_version }}"
        dest: "{{ src_directory }}/{{ kayobe_name }}"
        update: false

    - name: Ensure `venvs` directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/venvs"
        state: directory
        mode: "0755"

    - name: Ensure python3-venv is present (Ubuntu)
      ansible.builtin.package:
        name: python3-venv
        state: present
      become: true
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Ensure the latest version of pip is installed
      ansible.builtin.pip:
        name: pip
        virtualenv: "{{ ansible_env.HOME }}/venvs/kayobe"
        virtualenv_command: "/usr/bin/python3 -m venv"
        state: latest

    - name: Ensure `kayobe` is present
      ansible.builtin.pip:
        name: "{{ src_directory }}/{{ kayobe_name }}/"
        virtualenv: "{{ ansible_env.HOME }}/venvs/kayobe"
        virtualenv_command: "/usr/bin/python3 -m venv"
        state: present

    - name: Ensure vault password is present
      ansible.builtin.copy:
        src: "{{ vault_password_path }}"
        dest: "{{ ansible_env.HOME }}/vault.password"
        mode: "0600"

    - name: Ensure public key is present
      ansible.builtin.copy:
        src: "{{ ssh_key_path }}.pub"
        dest: "{{ ansible_env.HOME }}/.ssh/id_rsa.pub"
        mode: "0644"

    - name: Ensure private key is present
      ansible.builtin.copy:
        src: "{{ ssh_key_path }}"
        dest: "{{ ansible_env.HOME }}/.ssh/id_rsa"
        mode: "0600"

    - name: Ensure OpenStack Config repository is present
      ansible.builtin.git:
        repo: "{{ openstack_config_repo }}"
        dest: "{{ src_directory }}/{{ openstack_config_name }}"
        version: "{{ openstack_config_version }}"
        update: false

    - name: Ensure the latest version of pip is installed
      ansible.builtin.pip:
        name: pip
        virtualenv: "{{ src_directory }}/{{ openstack_config_name }}/venv"
        virtualenv_command: "/usr/bin/python3 -m venv"
        state: latest

    - name: Ensure `openstack` virtualenv is present
      ansible.builtin.pip:
        requirements: "{{ src_directory }}/{{ openstack_config_name }}/requirements.txt"
        virtualenv: "{{ src_directory }}/{{ openstack_config_name }}/venv"
        virtualenv_command: "/usr/bin/python3 -m venv"
        state: present

    - name: Ensure `openstack` ansible role requirements are present
      community.general.ansible_galaxy_install:
        dest: "{{ src_directory }}/{{ openstack_config_name }}/ansible/roles"
        requirements_file: "{{ src_directory }}/{{ openstack_config_name }}/requirements.yml"
        type: role
      vars:
        ansible_python_interpreter: "{{ src_directory }}/{{ openstack_config_name }}/venv/bin/python3"
      environment:
        PATH: "{{ src_directory }}/{{ openstack_config_name }}/venv/bin/:{{ ansible_env.PATH }}"

    - name: Ensure `openstack` ansible collection requirements are present
      community.general.ansible_galaxy_install:
        dest: "{{ src_directory }}/{{ openstack_config_name }}/ansible/collections"
        requirements_file: "{{ src_directory }}/{{ openstack_config_name }}/requirements.yml"
        type: collection
      vars:
        ansible_python_interpreter: "{{ src_directory }}/{{ openstack_config_name }}/venv/bin/python3"
      environment:
        PATH: "{{ src_directory }}/{{ openstack_config_name }}/venv/bin/:{{ ansible_env.PATH }}"

    - name: Ensure modified openstack config inventory exists
      ansible.builtin.copy:
        src: files/openstack-inventory
        dest: "{{ src_directory }}/{{ openstack_config_name }}/ansible/inventory"
        mode: 0644

    - name: Ensure `deploy-openstack.sh` script is present
      ansible.builtin.copy:
        src: "files/deploy-openstack.sh"
        dest: "{{ ansible_env.HOME }}/deploy-openstack.sh"
        mode: "755"
      tags: deploy-openstack

    - name: Ensure docker repository is present
      ansible.builtin.command:
        cmd: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      become: true
      changed_when: true
      when: ansible_facts['os_family'] == "RedHat"

    - name: Ensure docker respository is present (Ubuntu)
      block:
        - name: Add Docker GPG apt Key
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/trusted.gpg.d/docker.asc

        - name: Add Docker Repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable
            state: present
      become: true
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Ensure docker is present
      ansible.builtin.package:
        name: docker-ce
        state: present
      become: true

    - name: Ensure docker buildx is present (Ubuntu)
      ansible.builtin.package:
        name: docker-buildx-plugin
        state: present
      become: true
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Ensure docker service is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true
      become: true
