---

- hosts: localhost
  tasks:    
    - name: Show Playbook Directory
      debug:
       msg: "{{ playbook_dir }}"

    - name: Template Terraform files into project directory
      template:
        src: terraform.tfvars.j2
        dest: "{{ playbook_dir }}/terraform.tfvars"
  
    - name: Template Terraform userdata.cfg.tpl files into project template directory
      template:
        src: "{{ playbook_dir }}/templates/userdata.cfg.tpl.j2"
        dest: "{{ playbook_dir }}/templates/userdata.cfg.tpl"

# Provision the infrastructure
# The CaaS puts hosts for accessing the OpenStack API into the 'openstack' group
- hosts: openstack
  roles:
    - cluster_infra

- hosts: localhost
  tasks: 
  # Check whether an ans_vlt_pwd variable is defined and if so, save it into a file called '~/vault.password'. If it doesn't exist, create a the '~/vault.password' file with ans_vlt_pwd = "password_not_set" as the password.
    - name: Create vault password file
      vars:
        ans_dflt: 'default_password'
      ansible.builtin.copy:
        content: "{{ ans_vlt_pwd | default( ans_dflt , true ) }}"
        dest: "~/vault.password"
        mode: 0600

    # - block:
      # # Install the ansible requirements
      # - name: Install ansible posix
      #   command: ansible-galaxy collection install ansible.posix

      # # Install the ansible requirements
      # - name: Install ansible community general
      #   command: ansible-galaxy collection install community.general

      # # Install the ansible requirements
      # - name: Install ansible requirements
      #   command: ansible-galaxy install -r ansible/requirements.yml


      # - name: Deploy ansible playbook manually
      #   command: ansible-playbook -i ansible/inventory.yml ansible/configure-hosts.yml
      #   vars:
      #    terraform_binary_directory: "{{ playbook_dir }}/../bin"
      #    terraform_binary_path: "{{ terraform_binary_directory }}/../terraform"
      #    terraform_project_path: "{{ playbook_dir }}"

#      - debug: var=outputs
#        vars:
#          outputs: 
#            cluster_access_ip: "{{ hostvars[groups['openstack'][0]].cluster_gateway_ip }}"

      # - name: Debug groups
      #   debug:
      #     msg: "{{ groups | to_yaml }}"   
#      when: cluster_state != "absent"

# Import the playbook to start configuring the multi-node hosts.
- name: Configure hosts and deploy ansible
  import_playbook: ansible/configure-hosts.yml   


- hosts: ansible_control
  vars:
    ansible_pipelining: true
    ansible_ssh_pipelining: true
  tasks: 
    - name: Deploy OpenStack.
      ansible.builtin.command:
        cmd: "bash ~/deploy-openstack.sh"

# - hosts: ansible_control
#   vars:
#     ansible_pipelining: true
#     ansible_ssh_pipelining: true
#   tasks: 
#     - name: Deploy OpenStack.
#       ansible.builtin.shell:
#         cmd: "./deploy-openstack.sh"
